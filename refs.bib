@article{bigBallOfMud,
  author = {Brian Foote},
  title = {Big Ball of Mud},
  year = {1999},
  month = {June},
  day = {26},
  url = {http://www.laputan.org/pub/foote/mud.pdf},
}

@book{workingEffectivelyWithLegacyCode,
  Author = {Michael Feathers},
  Title = {Working Effectively with Legacy Code},
  Publisher = {Prentice Hall},
  Year = {2004},
  ISBN = {0131177052},
  URL = {http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052%3FSubscriptionId%3D0JYN1NVW651KCA56C102%26tag%3Dtechkie-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0131177052}
}

@article{nobleArtOfMaintenanceProgramming,
  author = {Jeff Atwood},
  title = {The Noble Art of Maintenance Programming},
  year = {2006},
  month = {June},
  day = {12},
  url = {http://blog.codinghorror.com/the-noble-art-of-maintenance-programming/},
}

@article{thingsYouShouldNeverDo,
  author = {Joel Spolsky},
  title = {Things You Should Never Do, Part I},
  year = {2000},
  month = {April},
  day = {6},
  url = {http://www.joelonsoftware.com/articles/fog0000000069.html},
}

@article{bigRewriteRevisited,
  author = {David Heinemeier Hansson},
  title = {The Big Rewrite, revisited},
  url = {https://signalvnoise.com/posts/3856-the-big-rewrite-revisited},
  month = {February},
  day = {11},
  year = {2015},
}

@article{lehman,
  doi = {10.1016/0164-1212(79)90022-0},
  url = {http://dx.doi.org/10.1016/0164-1212(79)90022-0},
  year  = {1979},
  month = {jan},
  publisher = {Elsevier {BV}},
  volume = {1},
  pages = {213--221},
  author = {M.M. Lehman},
  title = {On understanding laws,  evolution,  and conservation in the large-program life cycle},
  journal = {Journal of Systems and Software}
}

@book{softwareConflict,
  Author = {Robert L. Glass},
  Title = {Software Conflict 2.0: The Art and Science of Software Engineering},
  Publisher = {developer.* Books},
  Year = {2006},
  ISBN = {0977213307},
  URL = {http://www.amazon.co.uk/Software-Conflict-2-0-Science-Engineering/dp/0977213307}
}

@book{evaluatingSoftwareArchitectures,
  Author = {Paul Clements and Rick Kazman and Mark Klein},
  Title = {Evaluating Software Architectures: Methods and Case Studies},
  Publisher = {Addison-Wesley Professional},
  Year = {2001},
  ISBN = {020170482X},
  URL = {http://www.amazon.com/Evaluating-Software-Architectures-Methods-Studies/dp/020170482X}
}

@book{softwareArchitectureInPractice,
  Author = {Len Bass and Paul Clements and Rick Kazman},
  Title = {Software Architecture in Practice (2nd Edition)},
  Publisher = {Addison-Wesley Professional},
  Year = {2003},
  ISBN = {0321154959},
  URL = {http://www.amazon.com/Software-Architecture-Practice-2nd-Edition/dp/0321154959}
}

@book{codeAsCrimeScene,
 author = {Tornhill, Adam},
 title = {Your code as a crime scene : use forensic techniques to arrest defects, bottlenecks, and bad design in your programs},
 publisher = {Pragmatic Bookshelf},
 year = {2015},
 address = {Frisco, TX},
 isbn = {978-1-68050-038-7}
}

@book{patternsOfEnterpriseApplicationArchitecture,
  Author = {Martin Fowler},
  Title = {Patterns of Enterprise Application Architecture},
  Publisher = {Addison-Wesley Professional},
  Year = {2002},
  ISBN = {0321127420},
  URL = {http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420},
}

@misc{mongoose,
  Author = {Automattic},
  Title = {mongoose: MongoDB object modeling designed to work in an asynchronous environment},
  URL = {https://github.com/automattic/mongoose},
}

@article{anIntroductionToSoftwareArchitecture,
  title={An introduction to software architecture},
  author={Garlan, David and Shaw, Mary},
  journal={Advances in software engineering and knowledge engineering},
  volume={1},
  number={3.4},
  year={1993},
  publisher={Singapore}
}

% Discusses what you can do to improve the functioning of teams, and this feeds
% well into commenting about how certain development practises work well in the
% context of a business/team.
@book{fiveDysfunctions,
  Author = {Patrick Lencioni},
  Title = {The Five Dysfunctions of a Team: A Leadership Fable},
  Publisher = {Jossey-Bass},
  Year = {2002},
  ISBN = {0787960756},
  URL = {http://www.amazon.com/The-Five-Dysfunctions-Team-Leadership/dp/0787960756}
}

% Displays a cost of change exponential curve, along with a discussion on how
% Agile processes reduce that curve to a flat limit.
@article{costOfChangeEssay,
  title={Examining the Agile Cost of Change Curve},
  author={Scott Ambler},
  journal={Agile Modelling},
  url={http://www.agilemodeling.com/essays/costOfChange.htm},
}

% Defines the bus or truck factor as the number of people on your team who have
% to be hit with a truck before the project is in serious trouble.
@article{truckFactor,
  title={Truck Factor},
  author={Michael Bowler},
  journal={Agile Advice},
  year={2005},
  month={May},
  day={15},
  url={http://www.agileadvice.com/2005/05/15/agilemanagement/truck-factor/},
}

% Discusses benefits of writing a spec in some detail up-front, rather than
% going straight to code. Specs can be used to enforce conclusions to design
% decisions, forcing action on the hardest problems facing a project before they
% become the failure reasons.
@misc{painlessFunctionalSpecifications,
  author = {Joel Spolsky},
  title = {Painless Functional Specifications - Part 1: Why Bother? - Joel on Software},
  howpublished = {\url{http://www.joelonsoftware.com/articles/fog0000000036.html}},
  month = {October},
  year = {2000},
  note = {(Accessed on 03/07/2016)}
}

% Agile Manifesto. Not a surprise.
@misc{agileManifesto,
  author = {Agile Signatories},
  title = {Manifesto for Agile Software Development},
  howpublished = {\url{http://www.agilemanifesto.org/}},
  month = {},
  year = {},
  note = {(Accessed on 03/07/2016)}
}

% Automate deployments to avoid the individual differences in deployment
% strategies. Each build stage should produce a full build that is working
% software. Every deploy to each environment should use exactly the same
% artifacts. Testing should be automated at every stage of the build.
@article{deploymentProductionLine,
  author = {Jez Humble and Chris Read and Dan North},
  title = {The Deployment Production Line},
  journal ={AGILE Conference},
  volume = {0},
  isbn = {0-7695-2562-8 },
  year = {2006},
  pages = {113-118},
  doi = {http://doi.ieeecomputersociety.org/10.1109/AGILE.2006.53},
  publisher = {IEEE Computer Society},
  address = {Los Alamitos, CA, USA},
}

% Describes in detail amazon's build system. Apollo, Brazil, PackageBuilder
@misc{amazonBuildSystem,
  author = {EraserQ},
  title = {What does Amazon use for its build and release system - Developer Blogger},
  howpublished = {\url{http://www.developerblogger.com/4849_3397683/}},
  month = {July},
  year = {2010},
  note = {(Accessed on 03/07/2016)}
}

% Gives a history of why Apollo came to be, problems that were present without a
% build system. States how CodeDeploy is Apollo. Describes some load balancing
% features.
@misc{theStoryOfApollo,
  author = {Werner Vogels},
  title = {The Story of Apollo - Amazonâ€™s Deployment Engine - All Things Distributed},
  howpublished = {\url{http://www.allthingsdistributed.com/2014/11/apollo-amazon-deployment-engine.html}},
  month = {November},
  year = {2014},
  note = {(Accessed on 03/07/2016)}
}

% Technical details about Amazon circa 2006
@misc{convoWithVogels,
  author = {ACM Queue},
  title = {A Conversation with Werner Vogels - ACM Queue},
  howpublished = {\url{http://queue.acm.org/detail.cfm?id=1142065}},
  month = {June},
  year = {2006},
  note = {(Accessed on 03/07/2016)}
}
